#!/usr/local/bin/bash
	set -u

#-------------------------------------------------------------------------------
	_DEPLOY_VERSION=2.5.5-02

#-------------------------------------------------------------------------------
	ARGV=$BASH_ARGV

#-------------------------------------------------------------------------------
	CLOUD=/Users/Shared/CLOUD
	REPOSITORIES=$CLOUD/Development.GitHub/Repositories.FromGithub/repositories
	SYSTEM=$(uname -s)

#-------------------------------------------------------------------------------
	_DIRENV_CLI="$(which direnv_cli)"
	[[ -h "$_DIRENV_CLI" ]] && _DIRENV_CLI="$(readlink "$_DIRENV_CLI")"

	_DIRENV_ROOT="$(dirname "$_DIRENV_CLI")"

	SELF="$(basename "$ARGV")"
	HERE="$PWD"
	HERE_SHORT="$(echo "$HERE" | sed "1,\$s#$REPOSITORIES/#<REPOSITORIES>/#")"

	export DIRENV_BASE="$HERE"
	export DIRENV_HOME="$HERE/.env"

	DIRENV_FILE_ENVRC="$DIRENV_BASE/.envrc"

	DIRENV_NAME_CONFIG="config"
	DIRENV_NAME_SSHENV="ssh-environment"
	DIRENV_NAME_SSHUSR="ssh-user"

	DIRENV_FILE_CONFIG="$DIRENV_HOME/$DIRENV_NAME_CONFIG"
	DIRENV_FILE_SSHENV="$DIRENV_HOME/$DIRENV_NAME_SSHENV"
	DIRENV_FILE_SSHUSR="$DIRENV_HOME/$DIRENV_NAME_SSHUSR"

	[[ -f "$DIRENV_FILE_CONFIG" ]] && eval $(grep -E '^use_' $DIRENV_FILE_CONFIG | tr "[:lower:]" "[:upper:]")

	export SSH_ENV="$DIRENV_FILE_SSHENV"

	export SSH_USR="default"
	[[ -f "$DIRENV_FILE_SSHUSR" ]] && export SSH_USR="$(< $DIRENV_FILE_SSHUSR)"

#-------------------------------------------------------------------------------
	. $HOME/.bashrc

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
path_add() {
	#if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
	#	PATH="$1${PATH:+":$PATH"}"
	#fi
	
	PATH=${PATH//":$1"/}
	PATH=${PATH//"$1:"/}

	export PATH="$1:$PATH"
}

#-------------------------------------------------------------------------------
status_timer() {
	_P1="${1:-}"; shift
	_P2="${2:-}"

	# USE_... YES/NO/MISSING
	case "${_P2^^}" in
		"-")	_YSN_PRINT=NO	;;
		"NO")	_YSN_PRINT=NO	;;
		*)		_YSN_PRINT=YES	;;
	esac

	_TIMESTAMP="$(date '+%H:%M:%S') "
	_TIMESTAMP=""

	if [[ $_YSN_PRINT == YES ]]; then
		printf "%s%-10s: " "$_TIMESTAMP" "$_P1"
	fi
}

#-------------------------------------------------------------------------------
status() {
	_P1="${1:-}"; shift		# Komponente: node, ionic, angular, python, ...
	_P2="${1:-}"; shift		# USE_....
	_P3="${1:-}"; shift		# Enabled/Missing
	_P4="${1:-}"; shift		# Version
	_P5="$*"				# Pfad

	# USE_... YES/NO/MISSING
	_P2="${_P2^^}"

	case "$_P2" in
		"-")	_YSN_PRINT=NO			;;
		"NO")	_YSN_PRINT=NO			;;
		*)		_YSN_PRINT=YES; _P2=YES	;;
	esac

	if [[ "$_P3" == "Enabled"  ]]; then
		if [[ "$_P4" == "HERE" ]]; then
			_P4="-"
			_P4="NOT FOUND"
		fi
	fi

	case "$_P3" in
		YES)	_P3=		;;
		NO)		_P3=Nein	;;
	esac

	_YSN_PRINT=YES
	if [[ $_YSN_PRINT == YES ]]; then
		printf "%-10s | %-20s  %s\n" "$_P3" "$_P4" "$_P5"
	fi
}

#-------------------------------------------------------------------------------
use_git() {
	export _GIT_USER=$(< $HERE/.env/ssh-user)
	export _GIT_EMAIL=$_GIT_USER@via-internet.de

	git config --local user.email $_GIT_EMAIL 2>&-
}

#-------------------------------------------------------------------------------
use_ssh_agent() {
	_START=${#SSH_ENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	status  "SSH Agent"     ""	"Init"	""							"$_REL_PATH"
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${SSH_ENV}"

	chmod 600 "${SSH_ENV}"
	. "${SSH_ENV}" >/dev/null
}

#-------------------------------------------------------------------------------
use_ssh() {
	if [[ ! -f "${SSH_ENV}" ]]; then
		use_ssh_agent;
	else
		. "${SSH_ENV}" > /dev/null
		ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
			use_ssh_agent;
		}
	fi

	ssh-add -q -D						2>&-
	ssh-add -q ~/.ssh/id_rsa_$SSH_USR	2>&1 | grep -v 'Identity added'
}

#-------------------------------------------------------------------------------
use_python_venv() {
	export DIRENV_STATUS_HAS_PYTHON=NO
	export DIRENV_STATUS=

	export _PYTHON_PATH="-"
	export _PYTHON_VERSION="-"

	if [[ "YES" == "$USE_PYTHON" ]]; then
		if [[ ! -f .env/python/bin/activate ]]; then
			export DIRENV_STATUS=Missing
		else
			export DIRENV_STATUS=Enabled
			export DIRENV_STATUS_HAS_PYTHON=YES
			. .env/python/bin/activate

			export _PYTHON_PATH="$(show_path python)"
			export _PYTHON_VERSION="$(python --version 2>&-|cut -d' ' -f2)"

			export PIP_DOWNLOAD_CACHE=${_DIRENV_ROOT}/cache/pip
		fi
	else
		export DIRENV_STATUS=Disabled
	fi
}

#-------------------------------------------------------------------------------
use_flutter() {
	export _FLUTTER_HOME="$CLOUD/Development.Flutter/flutter/current"
	path_add "$_FLUTTER_HOME/bin"

	export _FLUTTER_PATH="$(which flutter)"
	export _FLUTTER_VERSION="$(flutter  --version 2>&-|head -1|cut -d' ' -f2)"
}

#-------------------------------------------------------------------------------
use_dart() {
	export _DART_HOME="$CLOUD/Development.Dart/dart/current"
	export _DART_PATH="$_DART_HOME/bin"
	path_add "$_DART_PATH"
	
	export _DART_VERSION="$(dart  --version 2>&1 | cut -d' ' -f4)"
}

#-------------------------------------------------------------------------------
use_julia() {
	export _JULIA_HOME="$CLOUD/Development.Julia/julia/current"
	export _JULIA_PATH="$_JULIA_HOME/bin"
	path_add "$_JULIA_PATH"

	export _JULIA_VERSION="$(julia  --version 2>&1 | cut -d' ' -f3)"
}

#-------------------------------------------------------------------------------
use_android() {
	export _ANDROID_HOME=$CLOUD/DevApps/Android/SDK
	export _ANDROID_PATH=$_ANDROID_HOME/tools/bin

	export ANDROID_HOME="$_ANDROID_HOME"
	export ANDROID_SDK=$ANDROID_HOME

	path_add "$ANDROID_SDK/tools"
	path_add "$ANDROID_SDK/tools/bin"
	path_add "$ANDROID_SDK/emulator"
	path_add "$ANDROID_SDK/platform-tools"

	export _ANDROID_VERSION="-" # $(android  --version 2>&-|head -1|cut -d' ' -f2)"
}

#-------------------------------------------------------------------------------
use_fastlane() {
	export _FASTLANE_HOME="$HOME/.fastlane"
	export _FASTLANE_PATH="$HOME/bin"

	path_add "$_FASTLANE_PATH"

	export _FASTLANE_VERSION="$(fastlane --version 2>&-|tail -1|cut -d' ' -f2)"
}

#-------------------------------------------------------------------------------
use_yarn() {
	if [ "$(which yarn)" = "" ]; then
		export _YARN_PATH="MISSING"
		export _YARN_VERSION="MISSING"
	else
		export _YARN_PATH="$(show_path yarn)"
		export _YARN_VERSION="$(yarn --version 2>&-)"
	fi
}

#-------------------------------------------------------------------------------
use_ionic() {
	if [ "$(which ionic)" = "" ]; then
		export _IONIC_PATH="MISSING"
		export _IONIC_VERSION="MISSING"
	else
		export _IONIC_PATH="$(show_path ionic)"
		export _IONIC_VERSION="$(ionic --version 2>&-)"
	fi
}

#-------------------------------------------------------------------------------
use_angular() {
	if [ "$(which ng)" = "" ]; then
		export _ANGULAR_PATH="MISSING"
		export _ANGULAR_VERSION="MISSING"
	else
		export _ANGULAR_PATH="$(show_path ng)"
		export _ANGULAR_VERSION="$(ng version 2>&- | grep 'Angular CLI' | cut -c14- 2>&-)"
	fi
}

#-------------------------------------------------------------------------------
use_subversion() {
	path_add "/usr/local/opt/apr/bin"
	path_add "/usr/local/opt/apr-util/bin"

	export _SUBVERSION_VERSION="-"
	export _SUBVERSION_PATH="-"	
}

#-------------------------------------------------------------------------------
use_java() {
	if [ "${SYSTEM,,}" == "linux" ]; then
		export JAVA_HOME=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64
	else
		export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
	fi

	path_add "$JAVA_HOME/bin"

	if [ "$(which java)" = "" ]; then
		export _JAVA_PATH="MISSING"
		export _JAVA_VERSION="MISSING"
	else
		export _JAVA_VERSION="$(java -version 2>&1 | grep version |cut -d'"' -f2)"
		export _JAVA_PATH="$JAVA_HOME/bin"
	fi
}

#-------------------------------------------------------------------------------
use_groovy() {
	export GROOVY_ROOT=$DIRENV_BASE/groovy/3.0.1
	export GROOVY_HOME=$GROOVY_ROOT

	if [ "$(which groovy)" = "" ]; then
		export _GROOVY_VERSION="MISSING"
		export _GROOVY_PATH="MISSING"
	else
		export _GROOVY_PATH="$GROOVY_HOME/bin"
		path_add "$_GROOVY_PATH"

		export _GROOVY_VERSION="$(groovy -version 2>&1 | cut -d':' -f2 | cut -c2-)"
	fi
}

#-------------------------------------------------------------------------------
use_gradle() {
	export GRADLE_ROOT=$DIRENV_BASE/gradle/$USE_GRADLE
	export GRADLE_HOME=$GRADLE_ROOT

	if [ "$(which groovy)" = "" ]; then
		export _GROOVY_VERSION="MISSING"
		export _GROOVY_PATH="MISSING"
	else
		export _GRADLE_PATH="$GRADLE_HOME/bin"
		path_add "$_GRADLE_PATH"

		export _GRADLE_VERSION="$(gradle -version 2>&1 | grep "^Gradle" | cut -d' ' -f2)"
	fi
}

#-------------------------------------------------------------------------------
use_jenkins() {
	export JENKINS_ROOT=$DIRENV_BASE/jenkins
	export JENKINS_HOME=$JENKINS_ROOT/home

	export _JENKINS_VERSION="-"
	export _JENKINS_PATH="-"
}

#-------------------------------------------------------------------------------
use_mysql() {
	export MYSQL_ROOT=$DIRENV_BASE/mysql/8.0.19
	export MYSQL_HOME=$MYSQL_ROOT

	export _MYSQL_PATH="$MYSQL_HOME/bin"

	path_add "$_MYSQL_PATH"

	export _MYSQL_VERSION="$( mysqld --version 2>&1 | cut -d ' ' -f4)"
}

#-------------------------------------------------------------------------------
use_zeppelin() {
	export _ZEPPELIN_VERSION=0.8.2

	export _ZEPPELIN_ROOT=$DIRENV_BASE/zeppelin/$_ZEPPELIN_VERSION
	export _ZEPPELIN_HOME=$_ZEPPELIN_ROOT

	export _ZEPPELIN_PATH="$_ZEPPELIN_HOME/bin"

	path_add "$_ZEPPELIN_PATH"
}

#-------------------------------------------------------------------------------
use_hadoop() {
	export _HADOOP_VERSION=3.2.1

	export _HADOOP_ROOT=$DIRENV_BASE/hadoop/$_HADOOP_VERSION
	export _HADOOP_HOME=$_HADOOP_ROOT

	export _HADOOP_PATH="$_HADOOP_HOME/bin"

	path_add "$_HADOOP_PATH"
}

#-------------------------------------------------------------------------------
show_path() {
	local _REL_PATH="$(which "$1")"

	_START=${#HERE}

	_REL_PATH="${_REL_PATH:$_START}"

	echo "HERE$_REL_PATH"
}

#-------------------------------------------------------------------------------
use_config_export() {
	local _VAR; _VAR="$1";				shift
	local _VAL; _VAL="${1:-MISSING}";	shift

	case $_VAL in
		yes|true|TRUE)	_VAL=YES		;;
		no|false|FALSE)	_VAL=NO			;;
		*)				_VAL="$_VAL"	;;
	esac

	export $_VAR=$_VAL
}

#-------------------------------------------------------------------------------
use_config() {
	[[ -f "$DIRENV_HOME/config" ]] && eval $(grep -E '^use_' $DIRENV_HOME/config | tr "[:lower:]" "[:upper:]")

	use_config_export USE_IONIC			${USE_IONIC:-NO}
	use_config_export USE_ANGULAR		${USE_ANGULAR:-NO}
	use_config_export USE_NODE			${USE_NODE:-NO}
	use_config_export USE_FLUTTER		${USE_FLUTTER:-NO}
	use_config_export USE_DART		${USE_DART:-NO}

	use_config_export USE_DOTNET		${USE_DOTNET:-NO}
	use_config_export USE_PYTHON		${USE_PYTHON:-NO}
	use_config_export USE_JULIA		${USE_JULIA:-NO}

	use_config_export USE_FASTLANE		${USE_FASTLANE:-NO}
	use_config_export USE_YARN			${USE_YARN:-NO}
	use_config_export USE_ANDROID		${USE_ANDROID:-NO}

	use_config_export USE_JAVA			${USE_JAVA:-NO}
	use_config_export USE_GROOVY		${USE_GROOVY:-NO}
	use_config_export USE_GRADLE		${USE_GRADLE:-NO}
	use_config_export USE_JENKINS		${USE_JENKINS:-NO}
	use_config_export USE_MYSQL			${USE_MYSQL:-NO}
	use_config_export USE_SUBVERSION	${USE_SUBVERSION:-NO}

	use_config_export USE_ZEPPELIN		${USE_ZEPPELIN:-NO}
	use_config_export USE_HADOOP		${USE_HADOOP:-NO}
}

#-------------------------------------------------------------------------------
show_config() {
	echo "USE_IONIC      = $USE_IONIC"
	echo "USE_ANGULAR    = $USE_ANGULAR"
	echo "USE_NODE       = $USE_NODE"
	echo "USE_FLUTTER    = $USE_FLUTTER"
	echo "USE_DART       = $USE_DART"
	
	echo "USE_DOTNET     = $USE_DOTNET"
	echo "USE_PYTHON     = $USE_PYTHON"
	echo "USE_JULIA      = $USE_JULIA"
	
	echo "USE_FASTLANE   = $USE_FASTLANE"
	echo "USE_YARN       = $USE_YARN"
	echo "USE_ANDROID    = $USE_ANDROID"

	echo "USE_JAVA       = $USE_JAVA"
	echo "USE_GROOVY     = $USE_GROOVY"
	echo "USE_GRADLE     = $USE_GRADLE"
	echo "USE_JENKINS    = $USE_JENKINS"
	echo "USE_MYSQL      = $USE_MYSQL"
	echo "USE_SUBVERSION = $USE_SUBVERSION"

	echo "USE_ZEPPELIN   = $USE_ZEPPELIN"
	echo "USE_HADOOP     = $USE_HADOOP"
}


#-------------------------------------------------------------------------------
use_config

#-------------------------------------------------------------------------------
status_timer	"HERE" ""
status  		"HERE" ""	"Enabled"	"$_DEPLOY_VERSION"	"$HERE_SHORT"

#status_timer	"ROOT" ""
#status  		"ROOT" ""	"Enabled"	""					"$_DIRENV_ROOT"

#-------------------------------------------------------------------------------
export NODE_VERSIONS="$DIRENV_HOME/node"

export _NODE_VERSION="-"
export _NODE_PATH="-"
export _NPM_VERSION="-"
export _NPM_PATH="-"

if [[ "$USE_NODE" != "NO" ]]; then
	status_timer	"Node"	"YES"
	if [[ -d "$NODE_VERSIONS" ]]; then
		_NODE_VERSION="$(ls -1rt "$NODE_VERSIONS" | sed '1,$s/^v//' |sort -n |tail -1)"

		#use node $_NODE_VERSION
		export PATH="$NODE_VERSIONS/v$_NODE_VERSION/bin:$DIRENV_HOME/bin:$PATH"

		# export _NODE_VERSION="$(node --version 2>&- | sed '1,$s/v//g' 2>&-)"
		export _NODE_PATH="$(show_path node)"
		export _NPM_VERSION="$(npm --version 2>&-)"
		export _NPM_PATH="$(show_path npm)"
	fi

	status  		"Node"	"$USE_NODE"	"Enabled"	"$_NODE_VERSION"		"$_NODE_PATH"
	status_timer	"NPM"	"YES"
	status  		"NPM"	"$USE_NODE"	"Enabled"	"$_NPM_VERSION"			"$_NPM_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_YARN" != "NO" ]]; then
	status_timer	"Yarn"		"YES"
	use_yarn
	status  	"Yarn"		"$USE_YARN"	"Enabled"	"$_YARN_VERSION"		"$_YARN_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_IONIC" != "NO" ]]; then
	status_timer	"Ionic"		"YES"
	use_ionic
	status  		"Ionic"		"$USE_IONIC"	"Enabled"	"$_IONIC_VERSION"		"$_IONIC_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_ANGULAR" != "NO" ]]; then
	status_timer	"Angular"	"YES"
	use_angular
	status  		"Angular"	"$USE_ANGULAR"	"Enabled"	"$_ANGULAR_VERSION"		"$_ANGULAR_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_DART" != "NO" ]]; then
	status_timer	"Dart"	"YES"
	use_dart
	status  		"Dart"		"$USE_FLUTTER"	"Enabled"	"$_DART_VERSION"		"$_DART_PATH"
fi

if [[ "$USE_FLUTTER" != "NO" ]]; then
	status_timer	"Flutter"	"YES"
	use_flutter
	status  		"Flutter"	"$USE_FLUTTER"	"Enabled"	"$_FLUTTER_VERSION"		"$_FLUTTER_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_JULIA" != "NO" ]]; then
	status_timer	"Julia"	"YES"
	use_julia
	status  		"Julia"		"$USE_JULIA"	"Enabled"	"$_JULIA_VERSION"		"$_JULIA_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_FASTLANE" != "NO" ]]; then
	status_timer	"Fastlane"	"$USE_FASTLANE"
	use_fastlane
	status  		"Fastlane"	"$USE_FASTLANE"	"Enabled"	"$_FASTLANE_VERSION"	"$_FASTLANE_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_ANDROID" != "NO" ]]; then
	status_timer	"Android"	"$USE_ANDROID"
	use_android
	status   		"Android"	"$USE_ANDROID"	"$_ANDROID_VERSION"	"$_ANDROID_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_PYTHON" != "NO" ]]; then
	status_timer	"Python"	"$USE_PYTHON"
	use_python_venv
	status  		"Python"	"$USE_PYTHON"			"$DIRENV_STATUS"	"$_PYTHON_VERSION"		"$_PYTHON_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_JAVA" != "NO" ]]; then
	status_timer	"Java"			"$USE_JAVA"
	use_java
	status  		"Java"			"$USE_JAVA"			"$DIRENV_STATUS"	"$_JAVA_VERSION"		"$_JAVA_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_GROOVY" != "NO" ]]; then
	status_timer	"Groovy"		"$USE_GROOVY"
	use_groovy
	status  		"Groovy"		"$USE_GROOVY"		"$DIRENV_STATUS"	"$_GROOVY_VERSION"		"$_GROOVY_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_GRADLE" != "NO" ]]; then
	status_timer	"Gradle"		"$USE_GRADLE"
	use_gradle
	status  		"Gradle"		"$USE_GRADLE"		"$DIRENV_STATUS"	"$_GRADLE_VERSION"		"$_GRADLE_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_MYSQL" != "NO" ]]; then
	status_timer	"MySQL"			"$USE_MYSQL"
	use_mysql
	status  		"MySQL"			"$USE_MYSQL"		"$DIRENV_STATUS"	"$_MYSQL_VERSION"		"$_MYSQL_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_SUBVERSION" != "NO" ]]; then
	status_timer	"Subversion"	"USE=$USE_SUBVERSION"
	use_subversion
	status  		"Subversion"	"USE=$USE_SUBVERSION"	"$DIRENV_STATUS"	"$_SUBVERSION_VERSION"		"$_SUBVERSION_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_JENKINS" != "NO" ]]; then
	status_timer	"Jenkins"		"USE=$USE_JENKINS"
	use_jenkins
	status  		"Jenkins"		"USE=$USE_JENKINS"	"$DIRENV_STATUS"	"$_JENKINS_VERSION"		"$_JENKINS_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_ZEPPELIN" != "NO" ]]; then
	status_timer	"Zeppelin"		"USE=$USE_ZEPPELIN"
	use_zeppelin
	status  		"Zeppelin"		"USE=$USE_ZEPPELIN"	"$DIRENV_STATUS"	"$_ZEPPELIN_VERSION"	"$_ZEPPELIN_PATH"
fi

#-------------------------------------------------------------------------------
if [[ "$USE_HADOOP" != "NO" ]]; then
	status_timer	"Hadoop"		"USE=$USE_HADOOP"
	use_hadoop
	status  		"Hadoop"		"USE=$USE_HADOOP"	"$DIRENV_STATUS"	"$_HADOOP_VERSION"		"$_HADOOP_PATH"
fi

#-------------------------------------------------------------------------------
if [[ 1 != 0 ]]; then
	status_timer	"Git"		"YES"
	use_git
	status  		"Git"		"YES"			"Enabled"			""						"$_GIT_EMAIL"
fi

#-------------------------------------------------------------------------------
status_timer		"SSH"		"YES"
use_ssh
status  			"SSH"		"YES"		"Enabled" "$SSH_AGENT_PID"		"$(ssh-add  -l | cut -d' ' -f3)"

	set +u

